Strat2 Structure
****************

Overview
--------

Strat2 is made to be able to Backtest multiple strategies at the same time so you can measure easily the algorithm evolution. Moreover, if you need a complex benchmark you can implement it as a Strategy

Philosophy
----------

a Backtest program is nothing less than a data generator that is why every data generated by the program should be logged even if the data is not directly related to the strategy. The program can be viewed as a set of actors interacting with each other, each action being logged for analysis

Design
------

Strat2 is organized arround decisions nodes. A decision node is a class that will choose which action(s) must be made in function of the input. There are 3 decisions nodes inside Strat2:
  - Security node
  - Portfolio node
  - Market node
All decision nodes actions are logged in a database format of your choosing (sqlite, MySQL, MongoDB).
The decision node concept allow you to break down your algorithm in different parts and measure more easily the effects of different policy on the algorithm return

Security Node
-------------

The Security Node determine the targets holding for each securities or each security type. It is meant to handle the 'theory' of the strategy: what weight you should have.

Portfolio Node
--------------

The Portfolio Node determine which transactions/order it must pass to reach the targets holdings in an optimal way. The Portfolio node manages holdings through orders (Portfolio class). If you want your strategy to pass order only when targets weight differe significativly from actual weight this should be implemented here.
If you want to implement a contingency strategy to limits loss, this should be implemented here since those actions will be taken against theory weights in order to limit loss during abnormal events.

Market Node
-----------

The Market Node is independent of the strategy but determine how orders are executed. This is the Market node which determine at which price you really buy/sell. It can be as simple as price asked = price buy/sell or as complex as simulating bid-ask spread. It also handles LMT/MKT/STOP orders


Communications
--------------

There are 2 Communicators:

    - TransactionMatrix   Strategy => Portfolio
    - Transaction         Portfolio => Market

a third is implied through a callback function which is executed when the order is filled
    - TransactionAnswer   Market => Portfolio

Database Structure
------------------

    - TransactionMatrix Table: targets Weight
        - Date
        - Securities column
        - Type
    - Transaction Table: Orders
        - Date
        - Ticker
        - Quantity
        - Price
        - Validity
        - Execution
        - Option1
        - Option2
        - Portfolio Value
        - Transactions Cost
        - Cash
    - Tansaction Answer: Price at Which orders where executed
        - Date
        - Ticker
        - Price
        - Size
    - Portfolio Table: Assets/Equity
        - Date
        - Cash
        - Portfolio Value
    - Tickers Table: a Table is created for each security
        - Date
        - Current Weight
        - Last Price

Current Issue
-------------

Input Data : How to encapsulate SQLDatabase Query / MongoDB
Multiple Query ?
Store input Data in memory ?


Feature
-------
  - logging :
      
    - Targets holding
    - Actual holding
    - Portfolio Value
        
  - Send transactions and process results
